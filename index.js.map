{"version":3,"sources":["index.ts","client.ts","router/index.ts","controllers/newsletter.ts","utilities/data.ts","controllers/page.ts"],"sourcesContent":["import 'dotenv/config'\n\nimport express from 'express'\nimport path from 'path'\nimport staticify from 'staticify'\nimport { fileURLToPath } from 'url'\n\nimport { getFileAsset, getImageAsset, SanityFileSource, SanityImageSource } from '@sanity/asset-utils'\nimport { toHTML } from '@portabletext/to-html'\n\nimport { client } from './client'\nimport { router } from './router'\n\nconst __filename = fileURLToPath(import.meta.url)\nconst __dirname = path.dirname(__filename)\n\nconst app = express()\n\napp.use(express.json())\napp.use(express.urlencoded())\n\nconst staticifyInstance = staticify(path.join(__dirname, 'build'))\n\napp.use(staticifyInstance.middleware)\n\napp.set('views', path.join(__dirname, 'views'))\napp.set('view engine', 'twig')\n\napp.use((request, response, next) => {\n  // Assets Configuration\n  response.locals.getVersionedPath = staticifyInstance.getVersionedPath\n\n  // Sanity Configuration\n  const config = client.config()\n\n  response.locals.getAsset = (asset: SanityImageSource) => {\n    return getImageAsset(asset, {\n      baseUrl: config.apiHost,\n      projectId: config.projectId!,\n      dataset: config.dataset!,\n    })\n  }\n\n  response.locals.getFile = (asset: SanityFileSource) => {\n    return getFileAsset(asset, config)\n  }\n\n  response.locals.parseHTML = (blocks: any) => {\n    if (blocks) {\n      return toHTML(blocks)\n    }\n  }\n\n  // Utilities\n  response.locals.lowercase = (string: string) => {\n    return string.toLowerCase()\n  }\n\n  next()\n})\n\napp.use('/', router)\n\nconst PORT = process.env.PORT || 3000\n\napp.listen(PORT, () => {\n  console.log(`App listening on port ${PORT}`)\n})\n\nexport default app\n","import 'dotenv/config'\n\nimport { createClient } from '@sanity/client'\n\nconst client = createClient({\n  apiVersion: process.env.SANITY_API,\n  dataset: process.env.SANITY_DATABASE,\n  projectId: process.env.SANITY_PROJECT,\n  useCdn: true,\n})\n\nexport { client }\n","import express from 'express'\n\nimport newsletter from '../controllers/newsletter'\nimport page from '../controllers/page'\n\nimport { getData } from '../utilities/data'\n\nconst router = express.Router()\n\nrouter.get('/', page)\nrouter.get('/:slug', page)\nrouter.get('/product/:slug', page)\n\nrouter.post('/signup', newsletter)\n\nrouter.use((request, response) => {\n  const data = getData(request)\n\n  response.status(404)\n\n  response.render('pages/page', { ...data })\n})\n\nexport { router }\n","import { Request, Response } from 'express'\n\nexport default async (request: Request, response: Response) => {\n  const { email } = request.body\n\n  try {\n    const body = JSON.stringify({\n      data: {\n        type: 'profile-subscription-bulk-create-job',\n        attributes: {\n          profiles: {\n            data: [\n              {\n                type: 'profile',\n                attributes: {\n                  subscriptions: {\n                    email: {\n                      marketing: {\n                        consent: 'SUBSCRIBED',\n                      },\n                    },\n                  },\n                  email,\n                },\n              },\n            ],\n          },\n          historical_import: false,\n        },\n        relationships: {\n          list: {\n            data: {\n              id: process.env.KLAVIYO_LIST_ID,\n              type: 'list',\n            },\n          },\n        },\n      },\n    })\n\n    const url = 'https://a.klaviyo.com/api/profile-subscription-bulk-create-jobs'\n    const options = {\n      method: 'POST',\n      headers: {\n        accept: 'application/vnd.api+json',\n        revision: '2025-04-15',\n        'content-type': 'application/vnd.api+json',\n        Authorization: `Klaviyo-API-Key ${process.env.KLAVIYO_API_KEY}`,\n      },\n      body,\n    }\n\n    const fetchResponse = await fetch(url, options)\n\n    if (fetchResponse.status === 202) {\n      response.status(202).send('Successfully subscribed!')\n    } else {\n      response.status(fetchResponse.status).send('Subscription failed.')\n    }\n  } catch (error) {\n    console.error('Error Subscribing:', error)\n\n    response.status(500).send('An error occurred.')\n  }\n}\n","import { Request } from 'express'\nimport * as fs from 'fs'\nimport { UAParser } from 'ua-parser-js'\n\nconst contentURL = process.env.NODE_ENV === 'production' ? './content.json' : '../content.json'\nconst contentFile = fs.readFileSync(new URL(contentURL, import.meta.url), 'utf-8')\nconst content = JSON.parse(contentFile)\n\nexport function getData(request: Request) {\n  const analytics = process.env.GOOGLE_ANALYTICS\n  const typekit = process.env.TYPEKIT\n\n  const slug = request.params.slug ?? 'home'\n\n  const ua = UAParser(request.headers['user-agent'])\n\n  const isDesktop = ua.device.type === undefined\n  const isPhone = ua.device.type === 'mobile'\n  const isTablet = ua.device.type === 'tablet'\n\n  const { categories, footer, menu, settings } = content\n  const pages = [...content.pages, ...content.products]\n\n  let data = pages.find((page) => page.slug.current === slug)\n\n  if (!data) {\n    data = pages.find((page) => page.slug.current === 'not-found')\n  }\n\n  return {\n    analytics,\n    typekit,\n\n    categories,\n    footer,\n    menu,\n    settings,\n\n    ...data,\n\n    isDesktop,\n    isPhone,\n    isTablet,\n  }\n}\n","import { Request, Response } from 'express'\n\nimport { getData } from '../utilities/data'\n\nexport default async (request: Request, response: Response) => {\n  response.render('pages/page', {\n    ...getData(request),\n  })\n}\n"],"mappings":"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","names":["express","path","staticify","fileURLToPath","getFileAsset","getImageAsset","toHTML","createClient","client","express","newsletter_default","request","response","email","body","url","options","fetchResponse","error","fs","UAParser","contentURL","contentFile","content","getData","request","analytics","typekit","slug","ua","isDesktop","isPhone","isTablet","categories","footer","menu","settings","pages","data","page","page_default","request","response","getData","router","express","page_default","newsletter_default","request","response","data","getData","__filename","fileURLToPath","__dirname","path","app","express","staticifyInstance","staticify","request","response","next","config","client","asset","getImageAsset","getFileAsset","blocks","toHTML","string","router","PORT","index_default"]}